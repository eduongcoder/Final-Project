// SettingsSidebar.js
import React from 'react';
import {
  X,
  Gift, // Cho n√∫t N·∫°p v√† icon b∆∞·ªõm/qu√†
  PenLine, // ƒêƒÉng truy·ªán
  Archive, // Kho truy·ªán
  ListOrdered, // X·∫øp h·∫°ng
  LineChart, // Th·ªùi gian th·ª±c
  Star, // ƒê√°nh gi√° m·ªõi
  Sun, // Icon m·∫∑t tr·ªùi
  KeyRound, // Icon ch√¨a kh√≥a
  Coins, // Icon ti·ªÅn xu
  Wallet, // Icon v√≠
  UserCircle2 // Icon User
} from 'lucide-react';

// D·ªØ li·ªáu cho c√°c m·ª•c ƒëi·ªÅu h∆∞·ªõng trong sidebar
const sidebarNavItems = [
  { label: "ƒêƒÉng truy·ªán", icon: PenLine, href: "#" },
  {
    label: "Kho truy·ªán",
    icon: Archive,
    href: "#",
    subItems: [
      { label: "Truy·ªán m·ªõi", href: "#" },
      { label: "Truy·ªán full", href: "#" },
    ],
  },
  {
    label: "X·∫øp h·∫°ng",
    icon: ListOrdered,
    href: "#",
    subItems: [
      { label: "X·∫øp h·∫°ng l∆∞·ª£t ƒë·ªçc", href: "#" },
      { label: "X·∫øp h·∫°ng ƒë·ªÅ c·ª≠", href: "#" },
      { label: "X·∫øp h·∫°ng t·∫∑ng th∆∞·ªüng", href: "#" },
      { label: "X·∫øp h·∫°ng b√¨nh lu·∫≠n", href: "#" },
    ],
  },
  { label: "Th·ªùi gian th·ª±c", icon: LineChart, href: "#" },
  { label: "ƒê√°nh gi√° m·ªõi", icon: Star, href: "#" },
];

const SettingsSidebar = ({ isOpen, onClose, username, userLoggedIn = false }) => {
  // username v√† userLoggedIn l√† v√≠ d·ª•, b·∫°n c·∫ßn truy·ªÅn d·ªØ li·ªáu th·ª±c t·∫ø
  // D·ª±a v√†o userLoggedIn ƒë·ªÉ hi·ªÉn th·ªã ph·∫ßn th√¥ng tin ng∆∞·ªùi d√πng

  return (
    <>
      {/* Overlay */}
      <div
        className={`fixed inset-0 bg-black z-30 transition-opacity duration-300 ease-in-out ${
          isOpen ? 'bg-opacity-50' : 'bg-opacity-0 pointer-events-none'
        }`}
        onClick={onClose}
      />
      {/* Sidebar Content */}
      <div
        className={`fixed top-0 right-0 h-full w-72 sm:w-80 bg-stone-50 text-gray-800 shadow-2xl z-40 transform transition-transform duration-300 ease-in-out ${
          isOpen ? 'translate-x-0' : 'translate-x-full'
        } flex flex-col`}
      >
        {/* Header with Close Button */}
        <div className="flex justify-between items-center p-4 border-b border-stone-200">
          {/* C√≥ th·ªÉ th√™m ti√™u ƒë·ªÅ ·ªü ƒë√¢y n·∫øu mu·ªën, v√≠ d·ª• "Menu" ho·∫∑c ƒë·ªÉ tr·ªëng */}
          {userLoggedIn ? (
             <div className="flex items-center">
              <Sun size={20} className="mr-2 text-yellow-500" />
             </div>
          ) : (
            <h2 className="text-lg font-semibold">Ti·ªán √≠ch</h2>
          )}
          <button onClick={onClose} className="text-gray-500 hover:text-gray-700">
            <X size={24} />
          </button>
        </div>

        {/* Scrollable Content Area */}
        <div className="flex-grow p-4 overflow-y-auto">
          {/* User Profile Section (hi·ªÉn th·ªã n·∫øu ƒëƒÉng nh·∫≠p) */}
          {userLoggedIn && (
            <div className="mb-5 p-3 border border-stone-300 rounded-md bg-white shadow-sm">
              <div className="flex justify-between items-center mb-3">
                <div className="flex items-center">
                  <UserCircle2 size={24} className="mr-2 text-gray-600" />
                  <span className="font-semibold text-sm text-gray-700">{username || "User Name"}</span>
                  <span className="ml-1.5 text-xs bg-red-500 text-white px-1.5 py-0.5 rounded-full">0</span>
                </div>
                <button className="text-xs bg-gray-200 hover:bg-gray-300 px-2.5 py-1 rounded text-gray-700">Tho√°t</button>
              </div>
              <ul className="space-y-1.5 text-sm text-gray-700">
                <li className="flex justify-between items-center cursor-pointer hover:bg-stone-100 p-1.5 rounded">
                  <span>N√¢ng c·∫•p t√†i kho·∫£n</span>
                  <span className="text-xs bg-red-500 text-white px-2 py-0.5 rounded-full font-semibold">NEW</span>
                </li>
                <li className="cursor-pointer hover:bg-stone-100 p-1.5 rounded">T·ªß truy·ªán c·ªßa t√¥i</li>
                <li className="cursor-pointer hover:bg-stone-100 p-1.5 rounded">L·ªãch s·ª≠ giao d·ªãch</li>
                <li className="cursor-pointer hover:bg-stone-100 p-1.5 rounded">C√†i ƒë·∫∑t c√° nh√¢n</li>
                <li className="cursor-pointer hover:bg-stone-100 p-1.5 rounded">Y√™u c·∫ßu h·ªó tr·ª£</li>
              </ul>
              <div className="mt-3 pt-3 border-t border-stone-200 grid grid-cols-2 gap-x-2 text-xs text-gray-600">
                <div className="flex items-center">
                  <Gift size={16} className="mr-1 text-orange-500" /> 0
                  <span className="ml-auto flex items-center"><KeyRound size={14} className="mr-1 text-gray-400" /> 0</span>
                </div>
                <div className="flex items-center">
                  <Coins size={16} className="mr-1 text-yellow-600" /> 0 {/* Ho·∫∑c Package cho icon h·ªôp qu√† */}
                  <span className="ml-auto flex items-center"><Wallet size={14} className="mr-1 text-gray-400" /> 0</span>
                </div>
              </div>
            </div>
          )}

          {/* N·∫°p Button */}
          <button className="w-full bg-orange-400 hover:bg-orange-500 text-white font-bold py-2.5 px-4 rounded-md flex items-center justify-center text-base mb-5 shadow hover:shadow-md transition-all">
            N·∫°p
            <span role="img" aria-label="butterfly" className="ml-1.5 text-xl">ü¶ã</span>
            {/* Ho·∫∑c d√πng icon Gift: <Gift size={20} className="ml-1.5" /> */}
          </button>

          {/* Navigation Items */}
          <nav>
            <ul className="space-y-1">
              {sidebarNavItems.map((item, index) => (
                <li key={index}>
                  <a href={item.href || "#"} className="flex items-center py-2 px-2.5 rounded-md hover:bg-stone-200 transition-colors group">
                    <item.icon size={18} className="mr-2.5 text-gray-600 group-hover:text-gray-800" />
                    <span className="text-sm font-medium text-gray-700 group-hover:text-gray-900">{item.label}</span>
                  </a>
                  {item.subItems && (
                    <ul className="pl-7 mt-1 space-y-0.5 text-xs">
                      {item.subItems.map((subItem, subIndex) => (
                        <li key={subIndex}>
                          <a href={subItem.href || "#"} className="block py-1 px-2 rounded-md hover:bg-stone-200 transition-colors text-gray-500 hover:text-gray-700">
                            ‚Ä¢ {subItem.label}
                          </a>
                        </li>
                      ))}
                    </ul>
                  )}
                </li>
              ))}
            </ul>
          </nav>
        </div>
      </div>
    </>
  );
};

export default SettingsSidebar;